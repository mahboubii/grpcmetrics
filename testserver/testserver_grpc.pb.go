// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package testserver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TestsServiceClient is the client API for TestsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestsServiceClient interface {
	Ok(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NonEmpty, error)
	Error(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	Stream(ctx context.Context, in *Empty, opts ...grpc.CallOption) (TestsService_StreamClient, error)
}

type testsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTestsServiceClient(cc grpc.ClientConnInterface) TestsServiceClient {
	return &testsServiceClient{cc}
}

func (c *testsServiceClient) Ok(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NonEmpty, error) {
	out := new(NonEmpty)
	err := c.cc.Invoke(ctx, "/testserver.TestsService/Ok", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testsServiceClient) Error(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/testserver.TestsService/Error", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testsServiceClient) Stream(ctx context.Context, in *Empty, opts ...grpc.CallOption) (TestsService_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &TestsService_ServiceDesc.Streams[0], "/testserver.TestsService/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &testsServiceStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TestsService_StreamClient interface {
	Recv() (*NonEmpty, error)
	grpc.ClientStream
}

type testsServiceStreamClient struct {
	grpc.ClientStream
}

func (x *testsServiceStreamClient) Recv() (*NonEmpty, error) {
	m := new(NonEmpty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TestsServiceServer is the server API for TestsService service.
// All implementations must embed UnimplementedTestsServiceServer
// for forward compatibility
type TestsServiceServer interface {
	Ok(context.Context, *Empty) (*NonEmpty, error)
	Error(context.Context, *Empty) (*Empty, error)
	Stream(*Empty, TestsService_StreamServer) error
	mustEmbedUnimplementedTestsServiceServer()
}

// UnimplementedTestsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTestsServiceServer struct {
}

func (UnimplementedTestsServiceServer) Ok(context.Context, *Empty) (*NonEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ok not implemented")
}
func (UnimplementedTestsServiceServer) Error(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Error not implemented")
}
func (UnimplementedTestsServiceServer) Stream(*Empty, TestsService_StreamServer) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}
func (UnimplementedTestsServiceServer) mustEmbedUnimplementedTestsServiceServer() {}

// UnsafeTestsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestsServiceServer will
// result in compilation errors.
type UnsafeTestsServiceServer interface {
	mustEmbedUnimplementedTestsServiceServer()
}

func RegisterTestsServiceServer(s grpc.ServiceRegistrar, srv TestsServiceServer) {
	s.RegisterService(&TestsService_ServiceDesc, srv)
}

func _TestsService_Ok_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestsServiceServer).Ok(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testserver.TestsService/Ok",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestsServiceServer).Ok(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestsService_Error_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestsServiceServer).Error(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testserver.TestsService/Error",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestsServiceServer).Error(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestsService_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TestsServiceServer).Stream(m, &testsServiceStreamServer{stream})
}

type TestsService_StreamServer interface {
	Send(*NonEmpty) error
	grpc.ServerStream
}

type testsServiceStreamServer struct {
	grpc.ServerStream
}

func (x *testsServiceStreamServer) Send(m *NonEmpty) error {
	return x.ServerStream.SendMsg(m)
}

// TestsService_ServiceDesc is the grpc.ServiceDesc for TestsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "testserver.TestsService",
	HandlerType: (*TestsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ok",
			Handler:    _TestsService_Ok_Handler,
		},
		{
			MethodName: "Error",
			Handler:    _TestsService_Error_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _TestsService_Stream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "testserver/testserver.proto",
}
